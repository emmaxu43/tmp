Grading at 03/21/2024:21:44:22.560315
For commit ID 940274ac90997a312347067cc1674c718c9b98fa
Grading at Thu Mar 21 05:44:20 PM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2  story-step1.o story-step2.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2  story-step1.o story-step2.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==10280== Memcheck, a memory error detector
==10280== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10280== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==10280== Command: ./story-step2 words.txt
==10280== Parent PID: 10279
==10280== 
==10280== 
==10280== HEAP SUMMARY:
==10280==     in use at exit: 27 bytes in 3 blocks
==10280==   total heap usage: 25 allocs, 22 frees, 9,101 bytes allocated
==10280== 
==10280== 27 bytes in 3 blocks are definitely lost in loss record 1 of 1
==10280==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==10280==    by 0x490C58E: strdup (strdup.c:42)
==10280==    by 0x1098EA: read_categories (rand_story.c:101)
==10280==    by 0x109519: main (story-step2.c:14)
==10280== 
==10280== LEAK SUMMARY:
==10280==    definitely lost: 27 bytes in 3 blocks
==10280==    indirectly lost: 0 bytes in 0 blocks
==10280==      possibly lost: 0 bytes in 0 blocks
==10280==    still reachable: 0 bytes in 0 blocks
==10280==         suppressed: 0 bytes in 0 blocks
==10280== 
==10280== For lists of detected and suppressed errors, rerun with: -s
==10280== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2  story-step1.o story-step2.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
You considered this a failure case:
malloc(): corrupted top size
timeout: the monitored command dumped core
But we did not.

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2  story-step1.o story-step2.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
The code did not compile!

Overall Grade: NO GRADE YET
